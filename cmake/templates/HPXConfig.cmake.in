# Copyright (c) 2014 Thomas Heller
# Copyright (c) 2015 Andreas Schaefer
#
# SPDX-License-Identifier: BSL-1.0
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

set(HPX_FIND_PACKAGE ON)
cmake_policy(VERSION 3.18)

# Forward HPX_* cache variables
include("${CMAKE_CURRENT_LIST_DIR}/HPXCacheVariables.cmake")

# include HPX cmake utilities
include("${CMAKE_CURRENT_LIST_DIR}/HPXMacros.cmake")

include(CMakeFindDependencyMacro)
find_dependency(HPXLocal @HPX_REQUIRED_HPXLOCAL_VERSION@ EXACT REQUIRED)

include("${CMAKE_CURRENT_LIST_DIR}/HPXInternalTargets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/HPXTargets.cmake")

get_filename_component(
  _hpx_root_dir "${CMAKE_CURRENT_LIST_DIR}/../../.." ABSOLUTE
)

set(HPX_VERSION_STRING "@HPX_VERSION@")
set(HPX_VERSION_MAJOR @HPX_VERSION_MAJOR@)
set(HPX_VERSION_MINOR @HPX_VERSION_MINOR@)
set(HPX_VERSION_SUBMINOR @HPX_VERSION_SUBMINOR@)

set(HPX_PREFIX "${_hpx_root_dir}")
set(HPX_DEBUG_POSTFIX "@HPX_DEBUG_POSTFIX@")
set(HPX_BUILD_TYPE "@CMAKE_BUILD_TYPE@")
set(HPX_CXX_STANDARD "@HPX_CXX_STANDARD@")
# We explicitly set the default to 98 to force CMake to emit a -std=c++XX flag.
# Some compilers (clang) have a different default standard for cpp and cu files,
# but CMake does not know about this difference. If the standard is set to the
# .cpp default in CMake, CMake will omit the flag, resulting in the wrong
# standard for .cu files.
set(CMAKE_CXX_STANDARD_DEFAULT 98)

set(HPX_GIT_COMMIT
    "@HPX_WITH_GIT_COMMIT@"
    CACHE STRING "Revision of HPX from Git" FORCE
)

set(HPX_CXX_COMPILER
    "@CMAKE_CXX_COMPILER@"
    CACHE STRING "CXX compiler for HPX" FORCE
)
set(HPX_CXX_COMPILER_ID
    "@CMAKE_CXX_COMPILER_ID@"
    CACHE STRING "CXX compiler id for HPX" FORCE
)
set(HPX_CXX_COMPILER_VERSION
    "@CMAKE_CXX_COMPILER_VERSION@"
    CACHE STRING "CXX compiler version for HPX" FORCE
)

# ##############################################################################
# Setup the imported libraries (publicly linked) #
include(HPX_SetupThreads)

# Boost Separate boost targets to be unarily linked to some modules
set(HPX_BOOST_ROOT "@BOOST_ROOT@")
# By default BOOST_ROOT is set to HPX_BOOST_ROOT (not necessary for PAPI or
# HWLOC cause we are specifying HPX_<lib>_ROOT as an HINT to find_package)
if(NOT BOOST_ROOT AND NOT "$ENV{BOOST_ROOT}")
  set(BOOST_ROOT ${HPX_BOOST_ROOT})
endif()
include(HPX_SetupBoost)
include(HPX_SetupBoostIostreams)

# Papi
set(HPX_PAPI_ROOT "@PAPI_ROOT@")
include(HPX_SetupPapi)


# LCI
if(HPX_WITH_FETCH_LCI)
  include("${CMAKE_CURRENT_LIST_DIR}/HPXLCITarget.cmake")
else()
  set(HPX_LCI_ROOT "@LCI_ROOT@")
  include(HPX_SetupLCI)
endif()

# APEX
set(APEX_WITH_MSR "@APEX_WITH_MSR@")
set(MSR_ROOT "@MSR_ROOT@")
set(APEX_WITH_ACTIVEHARMONY "@APEX_WITH_ACTIVEHARMONY@")
set(ACTIVEHARMONY_ROOT "@ACTIVEHARMONY_ROOT@")
set(APEX_WITH_OTF2 "@APEX_WITH_OTF2@")
set(OTF2_ROOT "@OTF2_ROOT@")
include(HPX_SetupApex)
# ##############################################################################

if(NOT HPX_CMAKE_LOGLEVEL)
  set(HPX_CMAKE_LOGLEVEL "WARN")
endif()

hpx_check_compiler_compatibility()
hpx_check_boost_compatibility()
hpx_check_allocator_compatibility()

if(NOT DEFINED ${CMAKE_FIND_PACKAGE_NAME}_FOUND)
  set(${CMAKE_FIND_PACKAGE_NAME}_FOUND true)
endif()

# Set legacy variables for linking and include directories
set(HPX_LIBRARIES "HPX::hpx;")
# All properties are propagated from HPX::hpx, so the following can be empty
set(HPX_INCLUDE_DIRS "")
set(HPX_LIBRARY_DIR "")
set(HPX_LINK_LIBRARIES "")
set(HPX_LINKER_FLAGS "")
